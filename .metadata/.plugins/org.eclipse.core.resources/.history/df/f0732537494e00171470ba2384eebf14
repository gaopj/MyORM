package gpj.orm.core;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import gpj.orm.bean.ColumnInfo;
import gpj.orm.bean.TableInfo;
import gpj.orm.utils.JDBCUtils;
import gpj.orm.utils.ReflectUtils;

/**
 * 负责查询（对外提供核心类）
 * 
 * @author gpj
 *
 */

@SuppressWarnings("all")
public abstract class Query implements Cloneable{

	@Override
	protected Object clone() throws CloneNotSupportedException {
		return super.clone();
	}

	/**
	 * 采用模板方法模式将JDBC操作封装成模板，便于重用
	 * @param sql sql语句
	 * @param params sql 参数
	 * @param clazz 记录要封装到的java类
	 * @param back CallBack的实现类，实现回调
	 * @return
	 */
	public Object executeQueryTemplate(String sql, Object[] params, Class clazz, CallBack back) {
		Connection conn = DBManager.getMysqlConn();
		List list = null; // 存放查询结果容器
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			ps = conn.prepareStatement(sql);
			// 给sql设参
			JDBCUtils.handleParams(ps, params);
			System.out.println(ps);
			rs = ps.executeQuery();

			return back.doExecute(conn, ps, rs);

		} catch (Exception e) {
			e.printStackTrace();
			return null;
		} finally {
			DBManager.close(ps, conn);
		}
	}

	/**
	 * 直接执行一个DML语句
	 * 
	 * @param sql
	 *            sql语句
	 * @param params
	 *            参数
	 * @return 执行sql语句后影响记录的行数
	 */
	public int executeDML(String sql, Object[] params) {
		Connection conn = DBManager.getMysqlConn();
		int count = 0;
		PreparedStatement ps = null;

		try {
			ps = conn.prepareStatement(sql);

			// 给sql设置参数
			JDBCUtils.handleParams(ps, params);

			System.out.println(ps);
			count = ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBManager.close(ps, conn);
		}

		return count;
	}

	/**
	 * 将一个对象存储到数据库中 把对象中不为null的属性往数据库中存储，如果数字为null则放0
	 * 
	 * @param obj
	 *            要存储的对象
	 */
	public void insert(Object obj) {
		// obj-->表中， insert into 表名 (id,uname,pew) values (?,?,?)
		Class c = obj.getClass();
		List<Object> params = new ArrayList<Object>();// 存储sql的参数对象
		TableInfo tableInfo = TableContext.poClassTableMap.get(c);
		StringBuilder sql = new StringBuilder("insert into " + tableInfo.getTname() + " (");
		int countNotNullField = 0;// 计算不为null的属性值
		Field[] fs = c.getDeclaredFields();

		for (Field f : fs) {
			String fieldName = f.getName();
			Object fieldValue = ReflectUtils.invokeGet(fieldName, obj);

			if (fieldValue != null) {
				sql.append(fieldName + ",");
				countNotNullField++;
				params.add(fieldValue);
			}
		}
		sql.setCharAt(sql.length() - 1, ')');
		sql.append(" values (");

		for (int i = 0; i < countNotNullField; i++) {
			sql.append("?,");
		}
		sql.setCharAt(sql.length() - 1, ')');

		executeDML(sql.toString(), params.toArray());
	}

	/**
	 * 删除clazz对象表示类对应表中记录（指定主键值id的记录）
	 * 
	 * @param clazz
	 *            表对应的类的class对象
	 * @param id
	 *            主键的值
	 * @return
	 */
	public void delete(Class clazz, Object id) {
		// 通过Class对象找TableInfo
		TableInfo tableInfo = TableContext.poClassTableMap.get(clazz);

		// 获得主键
		ColumnInfo onlyPriKey = tableInfo.getOnlyPriKey();

		String sql = "delete from " + tableInfo.getTname() + " where " + onlyPriKey.getName() + "=? ";

		executeDML(sql, new Object[] { id });
	}

	/**
	 * 删除对象在数据库中对应的记录（对象所在的类对应到表，主键的值对应到记录）
	 * 
	 * @param obj
	 */
	public void delete(Object obj) {
		Class c = obj.getClass();
		TableInfo tableInfo = TableContext.poClassTableMap.get(c);
		ColumnInfo onlyPriKey = tableInfo.getOnlyPriKey();// 获得主键

		// 通过反射机制，调用属性对应的get和set
		Object priKeyValue = ReflectUtils.invokeGet(onlyPriKey.getName(), obj);
		delete(c, priKeyValue);
	}

	/**
	 * 更新对象对应的记录，并且只更新指定字段的值
	 * 
	 * @param obj
	 *            所要更新的对象
	 * @param fielNames
	 *            更新的成员列表
	 * @return 影响行数
	 */
	public int update(Object obj, String[] fieldNames) {
		// obj {"uname","pwd"}--> update 表名 set uname = ?,pwd=? where id =?
		Class c = obj.getClass();
		List<Object> params = new ArrayList<Object>();// 存储sql的参数对象
		TableInfo tableInfo = TableContext.poClassTableMap.get(c);
		ColumnInfo priKey = tableInfo.getOnlyPriKey();
		StringBuilder sql = new StringBuilder("update " + tableInfo.getTname() + " set ");

		for (String fname : fieldNames) {
			Object fvalue = ReflectUtils.invokeGet(fname, obj);
			params.add(fvalue);
			sql.append(fname + "=?,");
		}
		sql.setCharAt(sql.length() - 1, ' ');
		sql.append(" where ");
		sql.append(priKey.getName() + "=? ");

		params.add(ReflectUtils.invokeGet(priKey.getName(), obj));// 主键的值
		return executeDML(sql.toString(), params.toArray());
	}

	/**
	 * 查询返回多行记录，并将每行记录封装到clazz指定的类的对象中
	 * 
	 * @param sql
	 *            查询语句
	 * @param clazz
	 *            封装数据的javabean类的Class对象
	 * @param params
	 *            sql的参数
	 * @return 查询到的结果
	 */
	public List queryRows(String sql, Class clazz, Object[] params) {

		Connection conn = DBManager.getMysqlConn();
		List list = null; // 存放查询结果容器
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			ps = conn.prepareStatement(sql);
			// 给sql设参
			JDBCUtils.handleParams(ps, params);
			System.out.println(ps);
			rs = ps.executeQuery();
			ResultSetMetaData metaData = rs.getMetaData();
			// 多行
			while (rs.next()) {
				if (list == null) {
					list = new ArrayList();
				}
				Object rowObj = clazz.newInstance();// 调用javabean无参构造器

				// 多列 select username ,pwd from t_user where id>?
				for (int i = 0; i < metaData.getColumnCount(); i++) {
					String columnName = metaData.getColumnLabel(i + 1);// username
					Object columnValue = rs.getObject(i + 1);

					// 调用rowObj对象的setUsername方法将，将columnValue的值设置进去
					ReflectUtils.invokeSet(rowObj, columnName, columnValue);
				}

				list.add(rowObj);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			DBManager.close(ps, conn);
		}

		return list;
	}

	public List queryRows(final String sql, final Object[] params, final Class clazz) {
		return (List) executeQueryTemplate(sql, params, clazz, new CallBack() {
			@Override
			public Object doExecute(Connection conn, PreparedStatement ps, ResultSet rs) {
				List list = null;
				try {
					ResultSetMetaData metaData = rs.getMetaData();
					// 多行
					while (rs.next()) {
						if (list == null) {
							list = new ArrayList();
						}
						Object rowObj = clazz.newInstance();// 调用javabean无参构造器

						// 多列 select username ,pwd from t_user where id>?
						for (int i = 0; i < metaData.getColumnCount(); i++) {
							String columnName = metaData.getColumnLabel(i + 1);// username
							Object columnValue = rs.getObject(i + 1);

							// 调用rowObj对象的setUsername方法将，将columnValue的值设置进去
							ReflectUtils.invokeSet(rowObj, columnName, columnValue);
						}

						list.add(rowObj);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				return list;
			}

		});
	}

	/**
	 * 查询返回一行记录，并将该行记录封装到clazz指定的类的对象中
	 * 
	 * @param sql
	 *            查询语句
	 * @param clazz
	 *            封装数据的javabean类的Class对象
	 * @param params
	 *            sql的参数
	 * @return 查询到的结果
	 */
	public Object queryUnityRows(String sql, Class clazz, Object[] params) {
		List list = queryRows(sql, clazz, params);
		return (list != null && list.size() > 0) ? list.get(0):null;
	}

	/**
	 * 查询返回一个值（一行一列）
	 * 
	 * @param sql
	 *            查询语句
	 * @param params
	 *            sql的参数
	 * @return 查询到的结果
	 */
	public Object queryValue(String sql, Object[] params) {
//		Connection conn = DBManager.getMysqlConn();
//		Object value = null; // 存放查询结果的对象
//		PreparedStatement ps = null;
//		ResultSet rs = null;
//		try {
//			ps = conn.prepareStatement(sql);
//			// 给sql设参
//			JDBCUtils.handleParams(ps, params);
//			System.out.println(ps);
//			rs = ps.executeQuery();
//
//			while (rs.next()) {
//				// select count(*) from user
//
//				value = rs.getObject(1);
//			}
//
//		} catch (Exception e) {
//			e.printStackTrace();
//		} finally {
//			DBManager.close(ps, conn);
//		}
		// return value;

		return executeQueryTemplate(sql, params, null, new CallBack() {

			@Override
			public Object doExecute(Connection conn, PreparedStatement ps, ResultSet rs) {
				Object value =null;
				try {
					while (rs.next()) {
						// select count(*) from user
						value = rs.getObject(1);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				}
				return value;
			}
		});
	}

	/**
	 * 查询返回一个数字（一行一列）
	 * 
	 * @param sql
	 *            查询语句
	 * @param params
	 *            sql的参数
	 * @return 查询到的结果
	 */
	public Number queryNumber(String sql, Object[] params) {
		// TODO Auto-generated method stub
		return (Number) queryValue(sql, params);
	}

	/**
	 * 分页查询
	 * 
	 * @param pageNum
	 *            第几页数据
	 * @param size
	 *            每页显示多少条
	 * @return
	 */
	abstract Object queryPagenate(int pageNum, int size);
}
